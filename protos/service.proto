syntax = "proto3";

package com.example.mypackage;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "My Echo Service"
        version: "1.0.0"
        description: "This section accepts Markdown.\n\n# This is a title\n\n## Subtitle\n\nRegular text with **bold** and *italic*."
    }
    schemes: HTTP
    host: "localhost:8080"
    consumes: "application/json"
    produces: "application/json"
    security_definitions: {
        security: {
            key: "bearer"
            value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
            }
        }
    }
    security: {
        security_requirement: {
			key: "bearer"
		}
    }
    responses: {
		key: "403"
		value: {
            description: "Returned when the user does not have permission to access the resource."
            schema: {
				json_schema: {
					ref: ".com.example.mypackage.UserInfo"
				}
			}
		}
	}
	responses: {
		key: "404"
		value: {
			description: "Returned when the resource does not exist."
			schema: {
				example: { value: '{ "message": "The requested resource does not exist." }' }
			}
		}
    }
    responses: {
        key: "503"
        value: {
            description: "Returned when the resource is temporarily unavailable."
            schema: {
				json_schema: {
					type: STRING
				}
			}
        }
    }
};

message UserInfo {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		example: { value: '{ "user": "user@example.com", "info": "Token expired" }' }
	};
    string user = 1;
    string info = 2;
}

message StringMessage {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		example: { value: '{ "message": "hello echo" }' }
	};
    // A string containing the message transmitted
    string message = 1;
}

service EchoService {
    // Send back the same message received
    //
    // The message posted to this endpoint is returned by the server as is.
    rpc Echo(StringMessage) returns (StringMessage) {
        option (google.api.http) = {
            post: "/echo-service/v1/echo"
            body: "*"
        };
    }

    // Send back the message received backwards
    //
    // The message posted to this endpoint is returned with the characters reversed.
    rpc EchoBackwards(StringMessage) returns (StringMessage) {
        option (google.api.http) = {
            post: "/echo-service/v1/echo-backwards"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            responses: {
                key: "200"
                value: {
                    schema: {
                        example: { value: '{ "message": "ohce olleh" }' }
                    }
                }
            }
        };
    }
}
